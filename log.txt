[{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/7531","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7531/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7531/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7531/events","html_url":"https://github.com/elixir-lang/elixir/issues/7531","id":310895009,"number":7531,"title":"`mix compile` error with invalid or empty `apps_path`","user":{"login":"talentdeficit","id":4431,"avatar_url":"https://avatars2.githubusercontent.com/u/4431?v=4","gravatar_id":"","url":"https://api.github.com/users/talentdeficit","html_url":"https://github.com/talentdeficit","followers_url":"https://api.github.com/users/talentdeficit/followers","following_url":"https://api.github.com/users/talentdeficit/following{/other_user}","gists_url":"https://api.github.com/users/talentdeficit/gists{/gist_id}","starred_url":"https://api.github.com/users/talentdeficit/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/talentdeficit/subscriptions","organizations_url":"https://api.github.com/users/talentdeficit/orgs","repos_url":"https://api.github.com/users/talentdeficit/repos","events_url":"https://api.github.com/users/talentdeficit/events{/privacy}","received_events_url":"https://api.github.com/users/talentdeficit/received_events","type":"User","site_admin":false},"labels":[{"id":10229539,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/App:Mix","name":"App:Mix","color":"CCCCCC","default":false},{"id":207974,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Kind:Bug","name":"Kind:Bug","color":"e10c02","default":false},{"id":39802929,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Level:Starter","name":"Level:Starter","color":"fef2c0","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2018-04-03T15:51:43Z","updated_at":"2018-04-03T15:52:52Z","closed_at":null,"author_association":"CONTRIBUTOR","body":"### Environment\r\n\r\n* Elixir & Erlang versions (elixir --version): \r\n```\r\nErlang/OTP 20 [erts-9.3] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]\r\n\r\nElixir 1.6.4 (compiled with OTP 20)\r\n```\r\n* Operating system: \r\n```\r\n17.0.4 Darwin\r\n```\r\n\r\n### Current behavior\r\n\r\n```\r\n$ cat mix.exs\r\ndefmodule Ask.Mixfile do\r\n  use Mix.Project\r\n\r\n  def project do\r\n    [\r\n      app: :apps_path_bug,\r\n      version: \"1.0.0\",\r\n      apps_path: \"this_path_does_not_exist_or_is_empty\"\r\n    ]\r\n  end\r\nend\r\n```\r\n\r\n```\r\n$ mix compile\r\n** (Enum.EmptyError) empty error\r\n    (elixir) lib/enum.ex:1843: Enum.reduce/2\r\n    (mix) lib/mix/tasks/compile.ex:93: Mix.Tasks.Compile.run/1\r\n    (mix) lib/mix/task.ex:314: Mix.Task.run_task/3\r\n    (mix) lib/mix/cli.ex:80: Mix.CLI.run_task/2\r\n    (elixir) lib/code.ex:677: Code.require_file/2\r\n```\r\n\r\n### Expected behavior\r\n\r\nthis should probably have a friendlier failure mode"},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/7530","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7530/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7530/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7530/events","html_url":"https://github.com/elixir-lang/elixir/issues/7530","id":310839565,"number":7530,"title":"Record typespecs are generated in a wrong way","user":{"login":"haljin","id":2393962,"avatar_url":"https://avatars3.githubusercontent.com/u/2393962?v=4","gravatar_id":"","url":"https://api.github.com/users/haljin","html_url":"https://github.com/haljin","followers_url":"https://api.github.com/users/haljin/followers","following_url":"https://api.github.com/users/haljin/following{/other_user}","gists_url":"https://api.github.com/users/haljin/gists{/gist_id}","starred_url":"https://api.github.com/users/haljin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/haljin/subscriptions","organizations_url":"https://api.github.com/users/haljin/orgs","repos_url":"https://api.github.com/users/haljin/repos","events_url":"https://api.github.com/users/haljin/events{/privacy}","received_events_url":"https://api.github.com/users/haljin/received_events","type":"User","site_admin":false},"labels":[{"id":17739153,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/App:Elixir","name":"App:Elixir","color":"CCCCCC","default":false},{"id":207974,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Kind:Bug","name":"Kind:Bug","color":"e10c02","default":false},{"id":39802961,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Level:Intermediate","name":"Level:Intermediate","color":"fad8c7","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2018-04-03T13:35:47Z","updated_at":"2018-04-03T14:01:31Z","closed_at":null,"author_association":"NONE","body":"### Environment\r\n* Elixir & Erlang versions (elixir --version): \r\n```\r\nErlang/OTP 20 [erts-9.3] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]\r\n\r\nElixir 1.6.3 (compiled with OTP 20)\r\n```\r\n\r\n* Operating system: \r\nOS X High Sierra\r\n\r\n### Current behavior\r\nIf you declare a record using: \r\n```elixir\r\ndefrecord :queue_bind,          :'queue.bind',          Record.extract(:'queue.bind',          from_lib: \"rabbit_common/include/rabbit_framing.hrl\")\r\n```\r\nAnd then want to create a typespec:\r\n```elixir\r\n @type queue_bind :: record(:'queue_bind',\r\n        ticket: term,\r\n        queue: String.t,\r\n        exchange: String.t,\r\n        routing_key: String.t,\r\n        nowait: term,\r\n        arguments: term)\r\n```\r\nThis typespec has no chances of working as the type it generates is:\r\n```elixir\r\ntype: {:queue_bind,\r\n   {:type, 32, :tuple,\r\n    [\r\n      {:atom, 0, :queue_bind},\r\n      {:type, 33, :term, []},\r\n      {:remote_type, 34, [{:atom, 0, String}, {:atom, 0, :t}, []]},\r\n      {:remote_type, 35, [{:atom, 0, String}, {:atom, 0, :t}, []]},\r\n      {:remote_type, 36, [{:atom, 0, String}, {:atom, 0, :t}, []]},\r\n      {:type, 37, :term, []},\r\n      {:type, 38, :term, []}\r\n    ]}, []}\r\n```\r\n\r\nThis will never match, as the record is in fact called `:'queue.bind'`. Declaring it with `queue.bind` raises a compilation error: \r\n```\r\n== Compilation error in file lib/amqp_director/queues.ex ==\r\n** (CompileError) lib/amqp_director/queues.ex:32: unknown record :\"queue.bind\"\r\n    (elixir) lib/kernel/typespec.ex:1171: Kernel.Typespec.compile_error/2\r\n    (elixir) lib/kernel/typespec.ex:470: Kernel.Typespec.translate_type/3\r\n    (stdlib) erl_eval.erl:670: :erl_eval.do_apply/6\r\n```\r\n\r\n### Expected behavior\r\nI would expect the `record` macro in typespec would take into account the option to rename records inside Elixir code.\r\n\r\nCurrently the workaround is to define two records, one for actual usage and one without renaming to use in the typespec.\r\n\r\n"},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/7522","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7522/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7522/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7522/events","html_url":"https://github.com/elixir-lang/elixir/issues/7522","id":310328595,"number":7522,"title":"mix does not support ipv6","user":{"login":"kbespalov","id":15847176,"avatar_url":"https://avatars0.githubusercontent.com/u/15847176?v=4","gravatar_id":"","url":"https://api.github.com/users/kbespalov","html_url":"https://github.com/kbespalov","followers_url":"https://api.github.com/users/kbespalov/followers","following_url":"https://api.github.com/users/kbespalov/following{/other_user}","gists_url":"https://api.github.com/users/kbespalov/gists{/gist_id}","starred_url":"https://api.github.com/users/kbespalov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kbespalov/subscriptions","organizations_url":"https://api.github.com/users/kbespalov/orgs","repos_url":"https://api.github.com/users/kbespalov/repos","events_url":"https://api.github.com/users/kbespalov/events{/privacy}","received_events_url":"https://api.github.com/users/kbespalov/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2018-04-01T14:43:04Z","updated_at":"2018-04-01T14:48:52Z","closed_at":null,"author_association":"NONE","body":"### Environment\r\n\r\n* Elixir & Erlang versions (elixir --version):  1.6.3-1\r\n* Operating system: Ubuntu 16.04\r\n\r\n### Current behavior\r\n\r\nIf mix is trying to perform http request to a domain that has **only** AAAA record (ipv6) using `read_httpc(path)`, then it fails with:\r\n\r\n```\r\nmix local.xxx\r\n** (Mix) httpc request failed with: {:failed_connect, [{:to_address, {'<domain here>', 443}},\r\n {:inet, [:inet], :nxdomain}]}\r\n```\r\n\r\nAs you can see, the root cause of the issue is usage of default  **:inet** (ipv4) socket family instead of **inet6fb4** despite the fact that a domain has only AAAA record.\r\n\r\nI have no experience with erlang and elixir, but looks like the following  option should be set:\r\n\r\n`httpc.set_option(:ipfamily, :inet6fb4, :mix)`\r\n\r\nin case of ipv6. Otherwise it will not work, because of default is always  **:inet** .\r\n\r\nYou can easy reproduce ipv6 only environment and the issue by adjusting `/etc/hosts` :\r\n\r\n```\r\n/etc/hosts\r\n\r\n::1/128  iloveelixir.com\r\n```\r\n\r\n```\r\nread_httpc(iloveelixir.com)\r\n```\r\n\r\n### Expected behavior\r\n\r\n`read_httpc(path)` should support ipv6.\r\n"},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/7512","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7512/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7512/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7512/events","html_url":"https://github.com/elixir-lang/elixir/issues/7512","id":309503184,"number":7512,"title":"Improve warning for grouped clauses","user":{"login":"josevalim","id":9582,"avatar_url":"https://avatars0.githubusercontent.com/u/9582?v=4","gravatar_id":"","url":"https://api.github.com/users/josevalim","html_url":"https://github.com/josevalim","followers_url":"https://api.github.com/users/josevalim/followers","following_url":"https://api.github.com/users/josevalim/following{/other_user}","gists_url":"https://api.github.com/users/josevalim/gists{/gist_id}","starred_url":"https://api.github.com/users/josevalim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/josevalim/subscriptions","organizations_url":"https://api.github.com/users/josevalim/orgs","repos_url":"https://api.github.com/users/josevalim/repos","events_url":"https://api.github.com/users/josevalim/events{/privacy}","received_events_url":"https://api.github.com/users/josevalim/received_events","type":"User","site_admin":false},"labels":[{"id":17739153,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/App:Elixir","name":"App:Elixir","color":"CCCCCC","default":false},{"id":207979,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Kind:Chore","name":"Kind:Chore","color":"fbca04","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-03-28T19:39:37Z","updated_at":"2018-04-03T11:51:49Z","closed_at":null,"author_association":"OWNER","body":"We should say that Foo and Bar have different names. When they have the same name, we should say they expect a different number of arguments (i.e. arity).\r\n\r\nhttps://elixirforum.com/t/compiler-warning-clauses-for-the-same-def-should-be-grouped-together/13366/2"},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/7508","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7508/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7508/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7508/events","html_url":"https://github.com/elixir-lang/elixir/issues/7508","id":309335884,"number":7508,"title":"Dialyzer issue introduced in for expansion of Elixir 1.6.4","user":{"login":"MaartenFaddegon","id":2544690,"avatar_url":"https://avatars2.githubusercontent.com/u/2544690?v=4","gravatar_id":"","url":"https://api.github.com/users/MaartenFaddegon","html_url":"https://github.com/MaartenFaddegon","followers_url":"https://api.github.com/users/MaartenFaddegon/followers","following_url":"https://api.github.com/users/MaartenFaddegon/following{/other_user}","gists_url":"https://api.github.com/users/MaartenFaddegon/gists{/gist_id}","starred_url":"https://api.github.com/users/MaartenFaddegon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MaartenFaddegon/subscriptions","organizations_url":"https://api.github.com/users/MaartenFaddegon/orgs","repos_url":"https://api.github.com/users/MaartenFaddegon/repos","events_url":"https://api.github.com/users/MaartenFaddegon/events{/privacy}","received_events_url":"https://api.github.com/users/MaartenFaddegon/received_events","type":"User","site_admin":false},"labels":[{"id":17739153,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/App:Elixir","name":"App:Elixir","color":"CCCCCC","default":false},{"id":207974,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Kind:Bug","name":"Kind:Bug","color":"e10c02","default":false},{"id":39802961,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Level:Intermediate","name":"Level:Intermediate","color":"fad8c7","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-03-28T11:57:33Z","updated_at":"2018-03-29T10:46:44Z","closed_at":null,"author_association":"NONE","body":"With \r\n\r\n```\r\nErlang/OTP 20 [erts-9.3] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false]\r\nElixir 1.6.4 (compiled with OTP 19)\r\n```\r\n\r\nthe following example code\r\n\r\n```\r\n  def f() do\r\n    for a <- [1,2,3], into: <<>>, do: <<a::big-integer-size(8)>>\r\n  end\r\n```\r\nseems to expand to code for which Dialyzer issues the following warnings:\r\n```\r\nlib/ex16.ex:20: The variable _@1 can never match since previous clauses completely covered the type <<_:8>>\r\nlib/ex16.ex:20: Cons will produce an improper list since its 2nd argument is <<_:8>>\r\n```\r\n\r\nWith earlier versions of Elixir no warnings were issued for the code."},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/7495","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7495/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7495/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7495/events","html_url":"https://github.com/elixir-lang/elixir/issues/7495","id":308729466,"number":7495,"title":"Processes spawned by `mix cmd` aren't terminated on abort","user":{"login":"grantovich","id":394835,"avatar_url":"https://avatars0.githubusercontent.com/u/394835?v=4","gravatar_id":"","url":"https://api.github.com/users/grantovich","html_url":"https://github.com/grantovich","followers_url":"https://api.github.com/users/grantovich/followers","following_url":"https://api.github.com/users/grantovich/following{/other_user}","gists_url":"https://api.github.com/users/grantovich/gists{/gist_id}","starred_url":"https://api.github.com/users/grantovich/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/grantovich/subscriptions","organizations_url":"https://api.github.com/users/grantovich/orgs","repos_url":"https://api.github.com/users/grantovich/repos","events_url":"https://api.github.com/users/grantovich/events{/privacy}","received_events_url":"https://api.github.com/users/grantovich/received_events","type":"User","site_admin":false},"labels":[{"id":10229539,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/App:Mix","name":"App:Mix","color":"CCCCCC","default":false},{"id":778790,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Note:Discussion","name":"Note:Discussion","color":"bfdadc","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-03-26T20:47:42Z","updated_at":"2018-03-28T15:04:21Z","closed_at":null,"author_association":"NONE","body":"### Environment\r\n\r\n* Erlang 20.3.2 + Elixir 1.6.4\r\n* Observed on Mac OS 10.13.3 and Alpine Linux 3.7\r\n\r\n### Current behavior\r\n\r\nWhen using `mix cmd --app <name> mix run --no-halt` within an umbrella project, the `mix run` command seems to keep running in the background indefinitely, even after the `mix cmd` command has been terminated by Ctrl-C.\r\n\r\nThe best example I have at hand is Phoenix, since its generator produces an umbrella project complete with apps, and `phx.server` uses the `--no-halt` option. Minimal demo:\r\n\r\n```\r\n$ mix archive.install https://github.com/phoenixframework/archives/raw/master/phx_new.ez\r\n$ mix phx.new hello --umbrella\r\n$ cd hello_umbrella\r\n\r\n$ mix cmd --app hello_web mix phx.server\r\n==> hello_web\r\n[info] Running HelloWeb.Endpoint with Cowboy using http://0.0.0.0:4000\r\n^C\r\nBREAK: (a)bort (c)ontinue (p)roc info (i)nfo (l)oaded\r\n       (v)ersion (k)ill (D)b-tables (d)istribution\r\n^C\r\n\r\n$ ps -x | grep phx.server\r\n11416 ??         0:01.82 /usr/local/Cellar/erlang/20.3.2/lib/erlang/erts-9.3/bin/beam.smp -- -root /usr/local/Cellar/erlang/20.3.2/lib/erlang -progname erl -- -home /Users/alex -- -pa /usr/local/Cellar/elixir/1.6.4/bin/../lib/eex/ebin /usr/local/Cellar/elixir/1.6.4/bin/../lib/elixir/ebin /usr/local/Cellar/elixir/1.6.4/bin/../lib/ex_unit/ebin /usr/local/Cellar/elixir/1.6.4/bin/../lib/iex/ebin /usr/local/Cellar/elixir/1.6.4/bin/../lib/logger/ebin /usr/local/Cellar/elixir/1.6.4/bin/../lib/mix/ebin -noshell -s elixir start_cli -extra /usr/local/bin/mix phx.server\r\n```\r\n\r\n### Expected behavior\r\n\r\nNaïvely I'd expect aborting a `mix cmd` command to abort any sub-command it spawned, and not leave it running in the background."},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/7494","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7494/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7494/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7494/events","html_url":"https://github.com/elixir-lang/elixir/issues/7494","id":308729445,"number":7494,"title":"Augment logger translations with metadata","user":{"login":"josevalim","id":9582,"avatar_url":"https://avatars0.githubusercontent.com/u/9582?v=4","gravatar_id":"","url":"https://api.github.com/users/josevalim","html_url":"https://github.com/josevalim","followers_url":"https://api.github.com/users/josevalim/followers","following_url":"https://api.github.com/users/josevalim/following{/other_user}","gists_url":"https://api.github.com/users/josevalim/gists{/gist_id}","starred_url":"https://api.github.com/users/josevalim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/josevalim/subscriptions","organizations_url":"https://api.github.com/users/josevalim/orgs","repos_url":"https://api.github.com/users/josevalim/repos","events_url":"https://api.github.com/users/josevalim/events{/privacy}","received_events_url":"https://api.github.com/users/josevalim/received_events","type":"User","site_admin":false},"labels":[{"id":119389005,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/App:Logger","name":"App:Logger","color":"cccccc","default":false},{"id":207975,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Kind:Feature","name":"Kind:Feature","color":"0052cc","default":false},{"id":39802961,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Level:Intermediate","name":"Level:Intermediate","color":"fad8c7","default":false}],"state":"open","locked":false,"assignee":{"login":"josevalim","id":9582,"avatar_url":"https://avatars0.githubusercontent.com/u/9582?v=4","gravatar_id":"","url":"https://api.github.com/users/josevalim","html_url":"https://github.com/josevalim","followers_url":"https://api.github.com/users/josevalim/followers","following_url":"https://api.github.com/users/josevalim/following{/other_user}","gists_url":"https://api.github.com/users/josevalim/gists{/gist_id}","starred_url":"https://api.github.com/users/josevalim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/josevalim/subscriptions","organizations_url":"https://api.github.com/users/josevalim/orgs","repos_url":"https://api.github.com/users/josevalim/repos","events_url":"https://api.github.com/users/josevalim/events{/privacy}","received_events_url":"https://api.github.com/users/josevalim/received_events","type":"User","site_admin":false},"assignees":[{"login":"josevalim","id":9582,"avatar_url":"https://avatars0.githubusercontent.com/u/9582?v=4","gravatar_id":"","url":"https://api.github.com/users/josevalim","html_url":"https://github.com/josevalim","followers_url":"https://api.github.com/users/josevalim/followers","following_url":"https://api.github.com/users/josevalim/following{/other_user}","gists_url":"https://api.github.com/users/josevalim/gists{/gist_id}","starred_url":"https://api.github.com/users/josevalim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/josevalim/subscriptions","organizations_url":"https://api.github.com/users/josevalim/orgs","repos_url":"https://api.github.com/users/josevalim/repos","events_url":"https://api.github.com/users/josevalim/events{/privacy}","received_events_url":"https://api.github.com/users/josevalim/received_events","type":"User","site_admin":false}],"milestone":null,"comments":12,"created_at":"2018-03-26T20:47:38Z","updated_at":"2018-03-29T10:47:44Z","closed_at":null,"author_association":"OWNER","body":"The following metadata should just work:\r\n\r\n  * [ ] registered name ([source](https://github.com/appsignal/appsignal-elixir/blob/e3d304e2424a8e648f66ee1f23cc7da427bacea2/lib/appsignal/error_handler.ex#L81-L84))\r\n\r\nThe following metadata requires new formatter rules:\r\n\r\n  * [ ] initial call ([source](https://github.com/getsentry/sentry-elixir/blob/747964b81dab4a3f79a154d3f918ba3c9fd95c2a/lib/sentry/logger.ex#L121))\r\n\r\nThe following metadata is always ignored unless explicitly fetched by the logger backend:\r\n\r\n  * [ ] catch (i.e. `{kind, reason, stack}` - we may need a better name than catch) ([source](https://github.com/getsentry/sentry-elixir/blob/747964b81dab4a3f79a154d3f918ba3c9fd95c2a/lib/sentry/logger.ex#L108-L115)) ([source](https://github.com/elixir-addicts/rollbax/blob/7ff1181b0f8e2ed1878b5bb4c8496f9eda144510/lib/rollbax/reporter/standard.ex#L121-L140)) ([source](https://github.com/jarednorman/bugsnag-elixir/blob/master/lib/bugsnag/logger.ex#L21-L23))\r\n "},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/7488","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7488/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7488/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7488/events","html_url":"https://github.com/elixir-lang/elixir/issues/7488","id":308358701,"number":7488,"title":"somewhat confusing syntax error when using `with` macro","user":{"login":"22a","id":7144173,"avatar_url":"https://avatars0.githubusercontent.com/u/7144173?v=4","gravatar_id":"","url":"https://api.github.com/users/22a","html_url":"https://github.com/22a","followers_url":"https://api.github.com/users/22a/followers","following_url":"https://api.github.com/users/22a/following{/other_user}","gists_url":"https://api.github.com/users/22a/gists{/gist_id}","starred_url":"https://api.github.com/users/22a/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/22a/subscriptions","organizations_url":"https://api.github.com/users/22a/orgs","repos_url":"https://api.github.com/users/22a/repos","events_url":"https://api.github.com/users/22a/events{/privacy}","received_events_url":"https://api.github.com/users/22a/received_events","type":"User","site_admin":false},"labels":[{"id":17739153,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/App:Elixir","name":"App:Elixir","color":"CCCCCC","default":false},{"id":207974,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Kind:Bug","name":"Kind:Bug","color":"e10c02","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-03-25T15:28:18Z","updated_at":"2018-03-26T13:51:20Z","closed_at":null,"author_association":"NONE","body":"### Environment\r\n\r\n* Elixir & Erlang versions (elixir --version):\r\n```\r\nErlang/OTP 20 [erts-9.3] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]\r\n\r\nElixir 1.6.4 (compiled with OTP 20)\r\n```\r\n* Operating system: `macOS 10.13.3 (17D102)`\r\n\r\n### Current behaviour\r\n\r\nIt is semantically incorrect to place a newline between the `with` \"keyword\" and the first `<-` expression.\r\n\r\n#### this works:\r\n```elixir\r\ndefmodule Foo do\r\n  def bar do\r\n    with str <- 5 |> Integer.to_string,\r\n         num <- str |> String.to_integer\r\n    do\r\n      IO.inspect str\r\n      IO.inspect num\r\n    end\r\n  end\r\nend\r\n```\r\n#### whereas this does not work:\r\n```elixir\r\ndefmodule Foo do\r\n  def bar do\r\n    with\r\n         str <- 5 |> Integer.to_string,\r\n         num <- str |> String.to_integer\r\n    do\r\n      IO.inspect str\r\n      IO.inspect num\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n#### and presents the following error:\r\n```\r\nErlang/OTP 20 [erts-9.3] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]\r\n\r\n** (SyntaxError) foo.ex:6: syntax error before: do\r\n    (elixir) lib/code.ex:677: Code.require_file/2\r\n```\r\n\r\n### Expected behaviour\r\n\r\nThe syntax error message isn't as helpful as some of the other Elixir error messages. I might expect this error message to give me a little more information about what I was doing wrong instead of just saying that something was wrong before `do` on line 6.\r\n\r\nI'm not certain if there's anything that can be improved here or if this is in any way actionable but nonetheless I wanted to open an issue in case anyone else makes the same whitespace/newline sensitive mistake."},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/7480","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7480/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7480/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7480/events","html_url":"https://github.com/elixir-lang/elixir/pull/7480","id":308057410,"number":7480,"title":"[WIP] Mix --max-fail opt","user":{"login":"Kartstig","id":2031422,"avatar_url":"https://avatars1.githubusercontent.com/u/2031422?v=4","gravatar_id":"","url":"https://api.github.com/users/Kartstig","html_url":"https://github.com/Kartstig","followers_url":"https://api.github.com/users/Kartstig/followers","following_url":"https://api.github.com/users/Kartstig/following{/other_user}","gists_url":"https://api.github.com/users/Kartstig/gists{/gist_id}","starred_url":"https://api.github.com/users/Kartstig/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Kartstig/subscriptions","organizations_url":"https://api.github.com/users/Kartstig/orgs","repos_url":"https://api.github.com/users/Kartstig/repos","events_url":"https://api.github.com/users/Kartstig/events{/privacy}","received_events_url":"https://api.github.com/users/Kartstig/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-03-23T14:45:38Z","updated_at":"2018-03-23T18:58:16Z","closed_at":null,"author_association":"NONE","pull_request":{"url":"https://api.github.com/repos/elixir-lang/elixir/pulls/7480","html_url":"https://github.com/elixir-lang/elixir/pull/7480","diff_url":"https://github.com/elixir-lang/elixir/pull/7480.diff","patch_url":"https://github.com/elixir-lang/elixir/pull/7480.patch"},"body":"- Relates to https://github.com/elixir-lang/elixir/issues/4586"},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/7458","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7458/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7458/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7458/events","html_url":"https://github.com/elixir-lang/elixir/issues/7458","id":306177096,"number":7458,"title":"Umbrella application: conflicting `only` on dependency","user":{"login":"stevedomin","id":512246,"avatar_url":"https://avatars2.githubusercontent.com/u/512246?v=4","gravatar_id":"","url":"https://api.github.com/users/stevedomin","html_url":"https://github.com/stevedomin","followers_url":"https://api.github.com/users/stevedomin/followers","following_url":"https://api.github.com/users/stevedomin/following{/other_user}","gists_url":"https://api.github.com/users/stevedomin/gists{/gist_id}","starred_url":"https://api.github.com/users/stevedomin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/stevedomin/subscriptions","organizations_url":"https://api.github.com/users/stevedomin/orgs","repos_url":"https://api.github.com/users/stevedomin/repos","events_url":"https://api.github.com/users/stevedomin/events{/privacy}","received_events_url":"https://api.github.com/users/stevedomin/received_events","type":"User","site_admin":false},"labels":[{"id":484973577,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Note:Needs%20more%20info","name":"Note:Needs more info","color":"d93f0b","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-03-17T18:01:50Z","updated_at":"2018-03-29T15:08:38Z","closed_at":null,"author_association":"CONTRIBUTOR","body":"### Environment\r\n\r\n* Elixir & Erlang versions (elixir --version): 1.6.3\r\n* Operating system: Alpine Linux\r\n\r\n### Current behavior\r\n\r\n* In an umbrella application with two sub apps, specify a dependency (in my case Swoosh) like this:\r\n  * app_1: `{:swoosh, \"~> 0.13\"}`\r\n  * app_2: `{:swoosh, \"~> 0.13\", only: [:dev, :test]}`\r\n* When I run `mix do deps.get, deps.compile, compile` on my Mac (macOS 10.12.6), no issues at all.\r\n* However, when ran into a Docker container (`elixir:alpine`), I get the following error\r\n\r\n```\r\nCould not compile :swoosh, no \"mix.exs\", \"rebar.config\" or \"Makefile\" (pass :compile as an option to customize compilation, set it to \"false\" to do nothing)\r\n```\r\n\r\n* If I remove the `only` specification inside `app_2`'s dependencies, everything runs normally again.\r\n\r\n### Expected behavior\r\n\r\n* Option 1: Mix runs normally, \"ignoring\" the `only` in `app_2`. (That's what seems to happen on Mac).\r\n* Option 2: Mix warns me that this `only` can't be taken into account.\r\n"},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/7448","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7448/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7448/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7448/events","html_url":"https://github.com/elixir-lang/elixir/issues/7448","id":304871936,"number":7448,"title":"__DIR__ does not match documentation when used in mix config file","user":{"login":"Nicd","id":273137,"avatar_url":"https://avatars2.githubusercontent.com/u/273137?v=4","gravatar_id":"","url":"https://api.github.com/users/Nicd","html_url":"https://github.com/Nicd","followers_url":"https://api.github.com/users/Nicd/followers","following_url":"https://api.github.com/users/Nicd/following{/other_user}","gists_url":"https://api.github.com/users/Nicd/gists{/gist_id}","starred_url":"https://api.github.com/users/Nicd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Nicd/subscriptions","organizations_url":"https://api.github.com/users/Nicd/orgs","repos_url":"https://api.github.com/users/Nicd/repos","events_url":"https://api.github.com/users/Nicd/events{/privacy}","received_events_url":"https://api.github.com/users/Nicd/received_events","type":"User","site_admin":false},"labels":[{"id":10229539,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/App:Mix","name":"App:Mix","color":"CCCCCC","default":false},{"id":207974,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Kind:Bug","name":"Kind:Bug","color":"e10c02","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-03-13T17:53:46Z","updated_at":"2018-03-22T12:17:25Z","closed_at":null,"author_association":"CONTRIBUTOR","body":"### Environment\r\n\r\n* Elixir & Erlang versions (elixir --version): 1.6.2\r\n* Operating system: macOS (probably irrelevant)\r\n\r\n### Current behavior\r\n\r\nIf you use `__DIR__` in a normal project's mix config file (in the `config/`) directory, it will be replaced with `\"config\"`, a relative path. But the Elixir documentation states:\r\n\r\n> Returns the absolute path of the directory of the current file as a binary.\r\n\r\nFor example:\r\n\r\n```elixir\r\n# In config/config.exs\r\nconfig :dir_test, dir: __DIR__\r\n\r\niex(1)> Application.get_env(:dir_test, :dir)\r\n\"config\"\r\n```\r\n\r\n### Expected behavior\r\n\r\n```elixir\r\n# In config/config.exs\r\nconfig :dir_test, dir: __DIR__\r\n\r\niex(1)> Application.get_env(:dir_test, :dir)\r\n\"/Users/nicd/dir_test/config\"\r\n```\r\n\r\nor document that in config files it returns a different value.\r\n"},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/7444","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7444/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7444/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7444/events","html_url":"https://github.com/elixir-lang/elixir/pull/7444","id":304199189,"number":7444,"title":"[WIP] Move illegal_bin_pattern to Elixir-land","user":{"login":"lexmag","id":248290,"avatar_url":"https://avatars2.githubusercontent.com/u/248290?v=4","gravatar_id":"","url":"https://api.github.com/users/lexmag","html_url":"https://github.com/lexmag","followers_url":"https://api.github.com/users/lexmag/followers","following_url":"https://api.github.com/users/lexmag/following{/other_user}","gists_url":"https://api.github.com/users/lexmag/gists{/gist_id}","starred_url":"https://api.github.com/users/lexmag/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lexmag/subscriptions","organizations_url":"https://api.github.com/users/lexmag/orgs","repos_url":"https://api.github.com/users/lexmag/repos","events_url":"https://api.github.com/users/lexmag/events{/privacy}","received_events_url":"https://api.github.com/users/lexmag/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-03-11T22:08:24Z","updated_at":"2018-03-13T10:59:13Z","closed_at":null,"author_association":"MEMBER","pull_request":{"url":"https://api.github.com/repos/elixir-lang/elixir/pulls/7444","html_url":"https://github.com/elixir-lang/elixir/pull/7444","diff_url":"https://github.com/elixir-lang/elixir/pull/7444.diff","patch_url":"https://github.com/elixir-lang/elixir/pull/7444.patch"},"body":""},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/7421","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7421/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7421/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7421/events","html_url":"https://github.com/elixir-lang/elixir/issues/7421","id":302278566,"number":7421,"title":"Enum.into/2 is broken for keyword lists","user":{"login":"josevalim","id":9582,"avatar_url":"https://avatars0.githubusercontent.com/u/9582?v=4","gravatar_id":"","url":"https://api.github.com/users/josevalim","html_url":"https://github.com/josevalim","followers_url":"https://api.github.com/users/josevalim/followers","following_url":"https://api.github.com/users/josevalim/following{/other_user}","gists_url":"https://api.github.com/users/josevalim/gists{/gist_id}","starred_url":"https://api.github.com/users/josevalim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/josevalim/subscriptions","organizations_url":"https://api.github.com/users/josevalim/orgs","repos_url":"https://api.github.com/users/josevalim/repos","events_url":"https://api.github.com/users/josevalim/events{/privacy}","received_events_url":"https://api.github.com/users/josevalim/received_events","type":"User","site_admin":false},"labels":[{"id":17739153,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/App:Elixir","name":"App:Elixir","color":"CCCCCC","default":false},{"id":207974,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Kind:Bug","name":"Kind:Bug","color":"e10c02","default":false},{"id":39802961,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Level:Intermediate","name":"Level:Intermediate","color":"fad8c7","default":false}],"state":"open","locked":false,"assignee":{"login":"whatyouhide","id":3890250,"avatar_url":"https://avatars3.githubusercontent.com/u/3890250?v=4","gravatar_id":"","url":"https://api.github.com/users/whatyouhide","html_url":"https://github.com/whatyouhide","followers_url":"https://api.github.com/users/whatyouhide/followers","following_url":"https://api.github.com/users/whatyouhide/following{/other_user}","gists_url":"https://api.github.com/users/whatyouhide/gists{/gist_id}","starred_url":"https://api.github.com/users/whatyouhide/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/whatyouhide/subscriptions","organizations_url":"https://api.github.com/users/whatyouhide/orgs","repos_url":"https://api.github.com/users/whatyouhide/repos","events_url":"https://api.github.com/users/whatyouhide/events{/privacy}","received_events_url":"https://api.github.com/users/whatyouhide/received_events","type":"User","site_admin":false},"assignees":[{"login":"whatyouhide","id":3890250,"avatar_url":"https://avatars3.githubusercontent.com/u/3890250?v=4","gravatar_id":"","url":"https://api.github.com/users/whatyouhide","html_url":"https://github.com/whatyouhide","followers_url":"https://api.github.com/users/whatyouhide/followers","following_url":"https://api.github.com/users/whatyouhide/following{/other_user}","gists_url":"https://api.github.com/users/whatyouhide/gists{/gist_id}","starred_url":"https://api.github.com/users/whatyouhide/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/whatyouhide/subscriptions","organizations_url":"https://api.github.com/users/whatyouhide/orgs","repos_url":"https://api.github.com/users/whatyouhide/repos","events_url":"https://api.github.com/users/whatyouhide/events{/privacy}","received_events_url":"https://api.github.com/users/whatyouhide/received_events","type":"User","site_admin":false}],"milestone":null,"comments":9,"created_at":"2018-03-05T12:18:16Z","updated_at":"2018-03-30T17:03:17Z","closed_at":null,"author_association":"OWNER","body":"See example below:\r\n\r\n```iex\r\niex(6)> Enum.into([a: 2], %{a: 1})[:a]\r\n2\r\niex(7)> Enum.into([a: 2], [a: 1])[:a]\r\n1\r\n```\r\n\r\nThe map result is correct, as the left side overrides the right side. To be more precise, `Enum.into/2` for two lists should be equivalent to `left ++ right`. We need to change both the shortcuts in `Enum.into/2` as well as the collectable implementation for lists."},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/7406","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7406/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7406/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7406/events","html_url":"https://github.com/elixir-lang/elixir/issues/7406","id":301199116,"number":7406,"title":"What is considered relevant when the formatter calculates line lengths?","user":{"login":"mariusbutuc","id":511893,"avatar_url":"https://avatars1.githubusercontent.com/u/511893?v=4","gravatar_id":"","url":"https://api.github.com/users/mariusbutuc","html_url":"https://github.com/mariusbutuc","followers_url":"https://api.github.com/users/mariusbutuc/followers","following_url":"https://api.github.com/users/mariusbutuc/following{/other_user}","gists_url":"https://api.github.com/users/mariusbutuc/gists{/gist_id}","starred_url":"https://api.github.com/users/mariusbutuc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mariusbutuc/subscriptions","organizations_url":"https://api.github.com/users/mariusbutuc/orgs","repos_url":"https://api.github.com/users/mariusbutuc/repos","events_url":"https://api.github.com/users/mariusbutuc/events{/privacy}","received_events_url":"https://api.github.com/users/mariusbutuc/received_events","type":"User","site_admin":false},"labels":[{"id":17739153,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/App:Elixir","name":"App:Elixir","color":"CCCCCC","default":false},{"id":207974,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Kind:Bug","name":"Kind:Bug","color":"e10c02","default":false},{"id":713992065,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Note:Formatter","name":"Note:Formatter","color":"c2e0c6","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-02-28T21:58:28Z","updated_at":"2018-03-29T10:46:19Z","closed_at":null,"author_association":"CONTRIBUTOR","body":"It seems to me that `mix format` currently overlooks some characters when \r\ncalculating line lengths. This difference became apparent in contrast with \r\nline lengths calculated by `credo`. \r\n\r\n### Current behaviour\r\n\r\nBelow is the noticed behaviour and my current attempt at reconciling the two: \r\n\r\n```diff\r\n         xxxxxxxxxxx: %{\r\n           xxxxxxxxxxxxxxxx: %{\r\n             xxxx: get_in(xxxxxxxxxxx, [:xxxxxxx, :xxxxxxxxxxxxxxxx, :xxxx]),\r\n+            # credo:disable-for-lines:2 Credo.Check.Readability.MaxLineLength\r\n             xxxxxxxxxxxxxx:\r\n-              get_in(xxxxxxxxxxx,\r\n-                [:xxxxxxx, :xxxxxxxxxxxxxxxx, :xxxxxxxxxxxxxx]),\r\n+              get_in(xxxxxxxxxxx, [:xxxxxxx, :xxxxxxxxxxxxxxxx, :xxxxxxxxxxxxxx]),\r\n             xxxxxxxx:\r\n               get_in(xxxxxxxxxxx, [:xxxxxxx, :xxxxxxxxxxxxxxxx, :xxxxxxxx])\r\n           },\r\n```\r\n\r\nThe old code wrapped around the 80 character limit. `credo` was happy, but \r\n`mix format` wants everything on one line, as the closing parenthesis and \r\ncomma seem to not be counted in the line length.\r\n\r\nThis behaviour is currently encountered in an umbrella project running \r\n  * `mix format` \r\n    + Elixir 1.6.2 \r\n    + Erlang/OTP 20.2.4\r\n    + `line_length` set to 80 in `.formatter.exs`\r\n  * `credo --strict` \r\n    + credo 0.8.10\r\n    + `max_length` set to 80 in `.credo.exs` \r\n      ```elixir\r\n      {Credo.Check.Readability.MaxLineLength, max_length: 80, ignore_specs: true}\r\n      ```\r\n  * macOS\r\n    ```sh\r\n    $ sw_vers\r\n    ProductName:  Mac OS X\r\n    ProductVersion: 10.13.3\r\n    BuildVersion: 17D102\r\n    ```\r\n\r\n___\r\n\r\nFWIW, this behaviour was [first brought up on the forum], confirmed as not intended, then migrated here.\r\n\r\n  [first brought up on the forum]: https://elixirforum.com/t/mix-format-what-is-considered-to-be-relevant-when-calculating-line-length/12781?u=mariusbutuc"},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/7351","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7351/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7351/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7351/events","html_url":"https://github.com/elixir-lang/elixir/issues/7351","id":297265066,"number":7351,"title":"Dialyzer warnings using anonymous functions in with statement else block that refers to any variable","user":{"login":"xadhoom","id":197981,"avatar_url":"https://avatars1.githubusercontent.com/u/197981?v=4","gravatar_id":"","url":"https://api.github.com/users/xadhoom","html_url":"https://github.com/xadhoom","followers_url":"https://api.github.com/users/xadhoom/followers","following_url":"https://api.github.com/users/xadhoom/following{/other_user}","gists_url":"https://api.github.com/users/xadhoom/gists{/gist_id}","starred_url":"https://api.github.com/users/xadhoom/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xadhoom/subscriptions","organizations_url":"https://api.github.com/users/xadhoom/orgs","repos_url":"https://api.github.com/users/xadhoom/repos","events_url":"https://api.github.com/users/xadhoom/events{/privacy}","received_events_url":"https://api.github.com/users/xadhoom/received_events","type":"User","site_admin":false},"labels":[{"id":17739153,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/App:Elixir","name":"App:Elixir","color":"CCCCCC","default":false},{"id":207974,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Kind:Bug","name":"Kind:Bug","color":"e10c02","default":false},{"id":120655381,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Note:Erlang%20bug","name":"Note:Erlang bug","color":"d4c5f9","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2018-02-14T22:15:56Z","updated_at":"2018-03-25T03:00:18Z","closed_at":null,"author_association":"NONE","body":"This is basically #6378 ported to 1.6.\r\nDid not understand if is a dialyzer issue or not.\r\n\r\n### Environment\r\n\r\n* Elixir & Erlang versions: Elixir 1.6 & 1.5  with otp 20.2.2\r\n* Operating system: Fedora Linux 27\r\n\r\n### Current behavior\r\n\r\nWhen using anonymous function in `else` block of a `with` statement, and such function refers to any variable (outside the with statement or in the `else` block itself), dialyzer always complains about `The created fun has no local return`\r\n\r\nBasically, everytime a Logger call is passed a fn() which logs a variable, dialyzer blames it.\r\n\r\nDoes not happen with Elixir 1.4.5\r\n\r\nI've setup a sample minimal repo to demonstrate the issue: https://github.com/xadhoom/test_dialyzer\r\nJust run `mix dialyzer` on it.\r\n\r\n`logger_dialyzer.ex, logger_dialyzer2.ex` will fail while trying to log a variable via an anon function\r\n`test_dialyzer.ex` same, but using a generic function instead of Logger (to demonstrate that is not a Logger issue)\r\n`works_dialyzer.ex` still uses an anon fun, but without referring to outer scope and passes the dialyzer check\r\n\r\n### Expected behavior\r\nDialyzer should not warn such statements as was in 1.4.5, or at least be sure that is a dialyzer issue.\r\n\r\n"},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/7346","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7346/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7346/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7346/events","html_url":"https://github.com/elixir-lang/elixir/issues/7346","id":297037955,"number":7346,"title":"Apply overrides: true to dependencies listed on rebar3 configs","user":{"login":"josevalim","id":9582,"avatar_url":"https://avatars0.githubusercontent.com/u/9582?v=4","gravatar_id":"","url":"https://api.github.com/users/josevalim","html_url":"https://github.com/josevalim","followers_url":"https://api.github.com/users/josevalim/followers","following_url":"https://api.github.com/users/josevalim/following{/other_user}","gists_url":"https://api.github.com/users/josevalim/gists{/gist_id}","starred_url":"https://api.github.com/users/josevalim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/josevalim/subscriptions","organizations_url":"https://api.github.com/users/josevalim/orgs","repos_url":"https://api.github.com/users/josevalim/repos","events_url":"https://api.github.com/users/josevalim/events{/privacy}","received_events_url":"https://api.github.com/users/josevalim/received_events","type":"User","site_admin":false},"labels":[{"id":10229539,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/App:Mix","name":"App:Mix","color":"CCCCCC","default":false},{"id":39802961,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Level:Intermediate","name":"Level:Intermediate","color":"fad8c7","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-02-14T10:08:45Z","updated_at":"2018-02-27T17:07:59Z","closed_at":null,"author_association":"OWNER","body":"This would replicate part of the rebar3 behaviour regarding level-based resolution and Mix overrides but would still maintain Mix behaviour in regards to diverged dependencies.\r\n\r\nThis still need to be validated by @ericmj."},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/7270","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7270/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7270/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7270/events","html_url":"https://github.com/elixir-lang/elixir/issues/7270","id":292149951,"number":7270,"title":"Code.string_to_quoted raises exception instead of returning error","user":{"login":"schnittchen","id":166765,"avatar_url":"https://avatars3.githubusercontent.com/u/166765?v=4","gravatar_id":"","url":"https://api.github.com/users/schnittchen","html_url":"https://github.com/schnittchen","followers_url":"https://api.github.com/users/schnittchen/followers","following_url":"https://api.github.com/users/schnittchen/following{/other_user}","gists_url":"https://api.github.com/users/schnittchen/gists{/gist_id}","starred_url":"https://api.github.com/users/schnittchen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/schnittchen/subscriptions","organizations_url":"https://api.github.com/users/schnittchen/orgs","repos_url":"https://api.github.com/users/schnittchen/repos","events_url":"https://api.github.com/users/schnittchen/events{/privacy}","received_events_url":"https://api.github.com/users/schnittchen/received_events","type":"User","site_admin":false},"labels":[{"id":17739153,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/App:Elixir","name":"App:Elixir","color":"CCCCCC","default":false},{"id":207974,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Kind:Bug","name":"Kind:Bug","color":"e10c02","default":false},{"id":39802961,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Level:Intermediate","name":"Level:Intermediate","color":"fad8c7","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2018-01-27T20:28:44Z","updated_at":"2018-02-13T07:10:39Z","closed_at":null,"author_association":"CONTRIBUTOR","body":"### Environment\r\n\r\n* Elixir & Erlang versions (elixir --version):\r\n```\r\nErlang/OTP 20 [erts-9.2] [source] [64-bit] [smp:8:8] [ds:8:8:10] [async-threads:10] [hipe] [kernel-poll:false]\r\n\r\nElixir 1.6.0 (compiled with OTP 20)\r\n```\r\n* Operating system: \r\nArch Linux\r\n\r\n### Current behavior\r\n\r\n```\r\niex(10)> \"\\\"\\\\x\\\"\" |> Code.string_to_quoted\r\n** (ArgumentError) missing hex sequence after \\x, expected \\xHH\r\n    (elixir) src/elixir_interpolation.erl:155: :elixir_interpolation.unescape_hex/3\r\n    (elixir) src/elixir_interpolation.erl:81: :elixir_interpolation.\"-unescape_tokens/2-lc$^0/1-0-\"/2\r\n    (elixir) src/elixir_tokenizer.erl:580: :elixir_tokenizer.handle_strings/6\r\n    (elixir) lib/code.ex:568: Code.string_to_quoted/2\r\n```\r\n\r\n### Expected behavior\r\n\r\nOther syntax errors give a result of `{:error, _}`\r\n"},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/7236","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7236/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7236/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7236/events","html_url":"https://github.com/elixir-lang/elixir/issues/7236","id":290142629,"number":7236,"title":"Lack of warning(s) when application in umbrella has a higher Elixir version specified","user":{"login":"blaketan","id":6557780,"avatar_url":"https://avatars1.githubusercontent.com/u/6557780?v=4","gravatar_id":"","url":"https://api.github.com/users/blaketan","html_url":"https://github.com/blaketan","followers_url":"https://api.github.com/users/blaketan/followers","following_url":"https://api.github.com/users/blaketan/following{/other_user}","gists_url":"https://api.github.com/users/blaketan/gists{/gist_id}","starred_url":"https://api.github.com/users/blaketan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/blaketan/subscriptions","organizations_url":"https://api.github.com/users/blaketan/orgs","repos_url":"https://api.github.com/users/blaketan/repos","events_url":"https://api.github.com/users/blaketan/events{/privacy}","received_events_url":"https://api.github.com/users/blaketan/received_events","type":"User","site_admin":false},"labels":[{"id":10229539,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/App:Mix","name":"App:Mix","color":"CCCCCC","default":false},{"id":207974,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Kind:Bug","name":"Kind:Bug","color":"e10c02","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-01-20T00:01:11Z","updated_at":"2018-01-23T08:41:21Z","closed_at":null,"author_association":"CONTRIBUTOR","body":"### Environment\r\n\r\n* Elixir & Erlang versions (elixir --version):  1.5.2, OTP 20.1\r\n* Operating system:  Mac OSX\r\n\r\n### Current behavior\r\nI'm upgrading my umbrella application from 1.5.2 to 1.6.0, and 1 of more applications in the umbrella will rely on new features in 1.6. I'd like to enforce the constraint that Elixir 1.6 needs to be installed.\r\n\r\nWhile on 1.5.2, I tried changing an application's `mix.exs` to this:\r\n```\r\ndefmodule NestedApp.Mixfile do\r\n  use Mix.Project\r\n\r\n  def project do\r\n    [\r\n      app: :nested_app,\r\n      version: \"0.1.0\",\r\n      build_path: \"../../_build\",\r\n      config_path: \"../../config/config.exs\",\r\n      deps_path: \"../../deps\",\r\n      lockfile: \"../../mix.lock\",\r\n      elixir: \"~> 1.6\",\r\n      start_permanent: Mix.env == :prod,\r\n      deps: deps()]\r\n  end\r\n...\r\nend\r\n```\r\nThis is the project's root mixfile, generated using `mix new my_umbrella --umbrella`\r\n```\r\ndefmodule MyUmbrella.Mixfile do\r\n  use Mix.Project\r\n\r\n  def project do\r\n    [apps_path: \"apps\",\r\n     start_permanent: Mix.env == :prod,\r\n     deps: deps()]\r\n  end\r\n...\r\nend\r\n```\r\nWhen calling `iex -S mix` from the project's root folder, all applications start up properly.\r\n\r\nI verified that when I included `elixir: \"~> 1.6\"` in the root mixfile, I received a proper warning.\r\n\r\n`** (Mix) You're trying to run MyUmbrella.Mixfile on Elixir v1.5.1 but it has declared in its mix.exs file it supports only Elixir ~> 1.6`\r\n\r\n### Expected behavior\r\nIf a nested application in an umbrella has a higher elixir version requirement than what is currently installed, prevent startup.\r\n\r\nOr `mix new <APP> --umbrella` should always generate an umbrella project's mixfile with `elixir: \"<CURRENT_VERSION>`to prevent confusion.\r\n\r\n"},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/7217","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7217/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7217/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7217/events","html_url":"https://github.com/elixir-lang/elixir/issues/7217","id":289551385,"number":7217,"title":"Show @since and @deprecated in `h` in IEx","user":{"login":"josevalim","id":9582,"avatar_url":"https://avatars0.githubusercontent.com/u/9582?v=4","gravatar_id":"","url":"https://api.github.com/users/josevalim","html_url":"https://github.com/josevalim","followers_url":"https://api.github.com/users/josevalim/followers","following_url":"https://api.github.com/users/josevalim/following{/other_user}","gists_url":"https://api.github.com/users/josevalim/gists{/gist_id}","starred_url":"https://api.github.com/users/josevalim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/josevalim/subscriptions","organizations_url":"https://api.github.com/users/josevalim/orgs","repos_url":"https://api.github.com/users/josevalim/repos","events_url":"https://api.github.com/users/josevalim/events{/privacy}","received_events_url":"https://api.github.com/users/josevalim/received_events","type":"User","site_admin":false},"labels":[{"id":16893337,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/App:IEx","name":"App:IEx","color":"CCCCCC","default":false},{"id":4930795,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Kind:Enhancement","name":"Kind:Enhancement","color":"009800","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2018-01-18T09:00:51Z","updated_at":"2018-01-18T10:31:44Z","closed_at":null,"author_association":"OWNER","body":"Depends on #7198."},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/7198","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7198/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7198/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7198/events","html_url":"https://github.com/elixir-lang/elixir/issues/7198","id":287787598,"number":7198,"title":"Adopt EEP 48","user":{"login":"josevalim","id":9582,"avatar_url":"https://avatars0.githubusercontent.com/u/9582?v=4","gravatar_id":"","url":"https://api.github.com/users/josevalim","html_url":"https://github.com/josevalim","followers_url":"https://api.github.com/users/josevalim/followers","following_url":"https://api.github.com/users/josevalim/following{/other_user}","gists_url":"https://api.github.com/users/josevalim/gists{/gist_id}","starred_url":"https://api.github.com/users/josevalim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/josevalim/subscriptions","organizations_url":"https://api.github.com/users/josevalim/orgs","repos_url":"https://api.github.com/users/josevalim/repos","events_url":"https://api.github.com/users/josevalim/events{/privacy}","received_events_url":"https://api.github.com/users/josevalim/received_events","type":"User","site_admin":false},"labels":[{"id":17739153,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/App:Elixir","name":"App:Elixir","color":"CCCCCC","default":false},{"id":16893337,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/App:IEx","name":"App:IEx","color":"CCCCCC","default":false},{"id":207979,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Kind:Chore","name":"Kind:Chore","color":"fbca04","default":false},{"id":207975,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Kind:Feature","name":"Kind:Feature","color":"0052cc","default":false},{"id":39802986,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Level:Advanced","name":"Level:Advanced","color":"f7c6c7","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/elixir-lang/elixir/milestones/23","html_url":"https://github.com/elixir-lang/elixir/milestone/23","labels_url":"https://api.github.com/repos/elixir-lang/elixir/milestones/23/labels","id":2856103,"number":23,"title":"v1.7.0","description":"","creator":{"login":"josevalim","id":9582,"avatar_url":"https://avatars0.githubusercontent.com/u/9582?v=4","gravatar_id":"","url":"https://api.github.com/users/josevalim","html_url":"https://github.com/josevalim","followers_url":"https://api.github.com/users/josevalim/followers","following_url":"https://api.github.com/users/josevalim/following{/other_user}","gists_url":"https://api.github.com/users/josevalim/gists{/gist_id}","starred_url":"https://api.github.com/users/josevalim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/josevalim/subscriptions","organizations_url":"https://api.github.com/users/josevalim/orgs","repos_url":"https://api.github.com/users/josevalim/repos","events_url":"https://api.github.com/users/josevalim/events{/privacy}","received_events_url":"https://api.github.com/users/josevalim/received_events","type":"User","site_admin":false},"open_issues":5,"closed_issues":7,"state":"open","created_at":"2017-10-21T20:25:30Z","updated_at":"2018-03-25T07:52:37Z","due_on":"2018-07-01T07:00:00Z","closed_at":null},"comments":0,"created_at":"2018-01-11T13:34:07Z","updated_at":"2018-01-17T12:31:32Z","closed_at":null,"author_association":"OWNER","body":"http://erlang.org/eep/eeps/eep-0048.html\r\n\r\nThe goal is to introduce `Code.fetch_docs/1` that returns the format in the EEP (or `{:error, _}` if the chunk is not available). Since the old documentation chunk will no longer exist, `Code.get_docs/2` should be changed to always return `nil` - which is a backwards compatible result - and be scheduled for deprecation.\r\n\r\nWe will also use the new chunk metadata to store relevant information, such as \"defaults\", \"deprecated\" and \"since\".\r\n\r\nReplaces #3589."},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/7097","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7097/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7097/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7097/events","html_url":"https://github.com/elixir-lang/elixir/issues/7097","id":280598798,"number":7097,"title":"Introduce __STACKTRACE__","user":{"login":"michalmuskala","id":477062,"avatar_url":"https://avatars0.githubusercontent.com/u/477062?v=4","gravatar_id":"","url":"https://api.github.com/users/michalmuskala","html_url":"https://github.com/michalmuskala","followers_url":"https://api.github.com/users/michalmuskala/followers","following_url":"https://api.github.com/users/michalmuskala/following{/other_user}","gists_url":"https://api.github.com/users/michalmuskala/gists{/gist_id}","starred_url":"https://api.github.com/users/michalmuskala/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/michalmuskala/subscriptions","organizations_url":"https://api.github.com/users/michalmuskala/orgs","repos_url":"https://api.github.com/users/michalmuskala/repos","events_url":"https://api.github.com/users/michalmuskala/events{/privacy}","received_events_url":"https://api.github.com/users/michalmuskala/received_events","type":"User","site_admin":false},"labels":[{"id":17739153,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/App:Elixir","name":"App:Elixir","color":"CCCCCC","default":false},{"id":207975,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Kind:Feature","name":"Kind:Feature","color":"0052cc","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/elixir-lang/elixir/milestones/23","html_url":"https://github.com/elixir-lang/elixir/milestone/23","labels_url":"https://api.github.com/repos/elixir-lang/elixir/milestones/23/labels","id":2856103,"number":23,"title":"v1.7.0","description":"","creator":{"login":"josevalim","id":9582,"avatar_url":"https://avatars0.githubusercontent.com/u/9582?v=4","gravatar_id":"","url":"https://api.github.com/users/josevalim","html_url":"https://github.com/josevalim","followers_url":"https://api.github.com/users/josevalim/followers","following_url":"https://api.github.com/users/josevalim/following{/other_user}","gists_url":"https://api.github.com/users/josevalim/gists{/gist_id}","starred_url":"https://api.github.com/users/josevalim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/josevalim/subscriptions","organizations_url":"https://api.github.com/users/josevalim/orgs","repos_url":"https://api.github.com/users/josevalim/repos","events_url":"https://api.github.com/users/josevalim/events{/privacy}","received_events_url":"https://api.github.com/users/josevalim/received_events","type":"User","site_admin":false},"open_issues":5,"closed_issues":7,"state":"open","created_at":"2017-10-21T20:25:30Z","updated_at":"2018-03-25T07:52:37Z","due_on":"2018-07-01T07:00:00Z","closed_at":null},"comments":9,"created_at":"2017-12-08T19:52:38Z","updated_at":"2018-02-03T16:10:18Z","closed_at":null,"author_association":"MEMBER","body":"**TL;DR** Replace the use of `System.get_stacktrace()` with a pseudo-variable `__STACKTRACE__` similar to `__MODULE__` or `__CALLER__` available only inside `catch` and `rescue` clauses of the `try` expression.\r\n\r\n## Reasons\r\nErlang recently set out to overhaul how stack traces are handled. The `:erlang.get_stacktrace/0` call (and thus it's Elixir's equivalent `System.get_stacktrace/0`) are problematic - they may cause the emulator to hold on to the stack trace for a very long time. This can be harmful, since the stack trace can be very big - in case of `FunctionClauseError` it includes all the arguments. The emulator has to hold on the stack trace for the last exception in general until the next exception is raised - which can be a long time.\r\nTo rectify this potential performance issue, OTP 20 started warning on the use of `:erlang.get_stacktrace()` outside of the `catch` clause of a `try` expression (in Elixir this would be outside of `catch` and `rescue`). The plan was to make the call return an empty list in some future Erlang version when called outside of `catch`.\r\nOTP 21 will introduce an even more restrictive mechanism, to understand it we need to understand the syntax for `catch` in Erlang:\r\n```erlang\r\ntry\r\n  ...\r\ncatch\r\n  Kind:Reason ->\r\n    ...\r\nend\r\n```\r\nWhere `Kind` can be one of `:exit`, `:error` and `:throw`. The proposed (and merged) enhancement replaces this with:\r\n```erlang\r\ntry\r\n  ...\r\ncatch\r\n  Kind:Reason:Stack ->\r\n    ...\r\nend\r\n```\r\nWhere the `Stack` variable would contain the stack-trace for the just-rescued exception. It is forbidden to pattern match on this variable or use an already-bound variable (which would be equivalent to pinning it in Elixir). It's now planned that some future Erlang release will always return empty lists from `:erlang.get_stacktrace()` and the only way to acquire the stacktrace will be with this syntax. This means we need a compatible Elixir solution.\r\n\r\n## Proposal\r\nTo solve this, we propose introduction of a new pseudo-variable `__STACKTRACE__` that would be available inside `catch` and `rescue` and would return the stack trace of the exception being currently handled.\r\nThis means that this code:\r\n```elixir\r\ntry do\r\n  ...\r\nrescue\r\n  e ->\r\n    ...\r\n    reraise(e, System.get_stacktrace())\r\nend\r\n```\r\nWould become:\r\n```elixir\r\ntry do\r\n  ...\r\nrescue\r\n  e ->\r\n    ...\r\n    reraise(e, __STACKTRACE__)\r\nend\r\n```\r\n\r\nThe `__STACKTRACE__` pseudo-variable would be only available inside `catch` and `resuce` parts of `try` - it should fail to compile if present in any other place, similar to how `__CALLER__` is not available outside of macros. \r\n\r\nHaving this as this kind of pseudo-variable is also compatible with how this works in Erlang - since neither pattern matching nor pinning of the stack variable is allowed, we don't loose any features.\r\n\r\n## Implementation\r\n\r\nSince OTP 21 is not stable yet, and we also want to support multiple Erlang versions, a conditional compilation of this feature is required. \r\n\r\n### On VMs without new syntax\r\n\r\nWhen compiling on systems without support for the new syntax, the `__STACKTRACE__` pseudo-variable should compile into a call to `:erlang.get_stacktrace/0`.\r\nAdditionally, the call to `:erlang.get_stacktrace/0` should happen as the very first thing in the block, assigning the result to some internal variable, which could be later substituted for the `__STACKTRACE__` expression. This provides a very important advantage compared to the current `System.get_stacktrace/0` call by protecting against the \"wrong stack trace\" bug, which is very easy to introduce accidentally:\r\n```elixir\r\ntry do\r\n  ...\r\ncatch\r\n  kind, reason ->\r\n    cleanup()\r\n    report_error(kind, reason, System.get_stacktrace())\r\nend\r\n\r\ndefp cleanup() do\r\n  {:ok, this_may_throw()}\r\ncatch\r\n  throw -> {:error, throw}\r\nend\r\n```\r\nIf the `this_may_throw()` operation does indeed throw, the `System.get_stacktrace/0` call would return the value for that throw, instead of the exception we've just caught, since it always returns the stack trace of the last exception. With the use of the `__STACKTRACE__` pseudo-variable, this would compile into something conceptually like:\r\n```elixir\r\ntry do\r\n  ...\r\ncatch\r\n  kind, reason ->\r\n    stracktrace = :erlag.get_stacktrace()\r\n    cleanup()\r\n    report_error(kind, reason, stacktrace)\r\nend\r\n```\r\nWhich does not suffer from the issue. This means not only is the proposed feature giving us compatibility with Erlang, it is also a significant improvement in terms of preventing strange and hard to find bugs.\r\n\r\n### On VMs with new syntax\r\n\r\nWhen compiling on a VM that supports the new syntax, the `__STACKTRACE__` call should just use it, the previous example would compile into the following equivalent Erlang code:\r\n```erlang\r\ntry do\r\n  ...\r\ncatch\r\n  Kind:Reason:Stacktrace ->\r\n    cleanup()\r\n    report_error(Kind, Reason, Stacktrace)\r\nend\r\n```\r\n\r\n## Alternatives\r\n\r\nAn alternative would be to also support something like:\r\n```elixir\r\ntry do\r\n  ...\r\ncatch\r\n  kind, reason, stack ->\r\n    ...\r\nend\r\n```\r\nThere are couple of problems with that approach:\r\n* similar to Erlang, it introduces this special variable that can't be pattern matched\r\n* there's no clear way of using this syntax in combination with `rescue` or `catch` with just one pattern (which catches only throws).\r\n* the compilation for VMs that don't support the new syntax is more awkward.\r\n\r\n## Compatibility\r\nBecause of the conditional-compilation, the feature becomes compatible with all the Erlang releases. There is the constraint that code compiled on VM that supports the feature wouldn't work on older VMs, but this is also true today - code compiled on OTP 20 wouldn't work on OTP 18, even though Elixir in itself supports running on both VMs.\r\n\r\n## Roadmap\r\nThe `System.get_stacktrace()` call should be soft-deprecated in the next release that includes the `__STACKTRACE__` feature. Additionally a loud deprecation should happen after 2 releases or as soon as Elixir declares compatibility for an Erlang VM that would always return an empty list for `:erlang.get_stacktrace()`. This might break the general deprecation policy approach of minimum 2 releases, but this is somewhat out of our hands."},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/7095","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7095/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7095/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7095/events","html_url":"https://github.com/elixir-lang/elixir/issues/7095","id":280414745,"number":7095,"title":"Allow compile time purging to happen per application/module","user":{"login":"josevalim","id":9582,"avatar_url":"https://avatars0.githubusercontent.com/u/9582?v=4","gravatar_id":"","url":"https://api.github.com/users/josevalim","html_url":"https://github.com/josevalim","followers_url":"https://api.github.com/users/josevalim/followers","following_url":"https://api.github.com/users/josevalim/following{/other_user}","gists_url":"https://api.github.com/users/josevalim/gists{/gist_id}","starred_url":"https://api.github.com/users/josevalim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/josevalim/subscriptions","organizations_url":"https://api.github.com/users/josevalim/orgs","repos_url":"https://api.github.com/users/josevalim/repos","events_url":"https://api.github.com/users/josevalim/events{/privacy}","received_events_url":"https://api.github.com/users/josevalim/received_events","type":"User","site_admin":false},"labels":[{"id":119389005,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/App:Logger","name":"App:Logger","color":"cccccc","default":false},{"id":207975,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Kind:Feature","name":"Kind:Feature","color":"0052cc","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/elixir-lang/elixir/milestones/23","html_url":"https://github.com/elixir-lang/elixir/milestone/23","labels_url":"https://api.github.com/repos/elixir-lang/elixir/milestones/23/labels","id":2856103,"number":23,"title":"v1.7.0","description":"","creator":{"login":"josevalim","id":9582,"avatar_url":"https://avatars0.githubusercontent.com/u/9582?v=4","gravatar_id":"","url":"https://api.github.com/users/josevalim","html_url":"https://github.com/josevalim","followers_url":"https://api.github.com/users/josevalim/followers","following_url":"https://api.github.com/users/josevalim/following{/other_user}","gists_url":"https://api.github.com/users/josevalim/gists{/gist_id}","starred_url":"https://api.github.com/users/josevalim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/josevalim/subscriptions","organizations_url":"https://api.github.com/users/josevalim/orgs","repos_url":"https://api.github.com/users/josevalim/repos","events_url":"https://api.github.com/users/josevalim/events{/privacy}","received_events_url":"https://api.github.com/users/josevalim/received_events","type":"User","site_admin":false},"open_issues":5,"closed_issues":7,"state":"open","created_at":"2017-10-21T20:25:30Z","updated_at":"2018-03-25T07:52:37Z","due_on":"2018-07-01T07:00:00Z","closed_at":null},"comments":4,"created_at":"2017-12-08T08:43:04Z","updated_at":"2017-12-23T19:30:07Z","closed_at":null,"author_association":"OWNER","body":"Requires #7046.\r\n\r\nMailing list discussion: https://groups.google.com/d/msgid/elixir-lang-core/606029ea-9855-44c6-ba94-69113ffed45c%40googlegroups.com?utm_medium=email&utm_source=footer"},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/7070","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7070/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7070/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7070/events","html_url":"https://github.com/elixir-lang/elixir/issues/7070","id":277512176,"number":7070,"title":"Inconsistency between DateTime and NaiveDateTime creation","user":{"login":"lexun","id":1910143,"avatar_url":"https://avatars0.githubusercontent.com/u/1910143?v=4","gravatar_id":"","url":"https://api.github.com/users/lexun","html_url":"https://github.com/lexun","followers_url":"https://api.github.com/users/lexun/followers","following_url":"https://api.github.com/users/lexun/following{/other_user}","gists_url":"https://api.github.com/users/lexun/gists{/gist_id}","starred_url":"https://api.github.com/users/lexun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lexun/subscriptions","organizations_url":"https://api.github.com/users/lexun/orgs","repos_url":"https://api.github.com/users/lexun/repos","events_url":"https://api.github.com/users/lexun/events{/privacy}","received_events_url":"https://api.github.com/users/lexun/received_events","type":"User","site_admin":false},"labels":[{"id":17739153,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/App:Elixir","name":"App:Elixir","color":"CCCCCC","default":false},{"id":778790,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Note:Discussion","name":"Note:Discussion","color":"bfdadc","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2017-11-28T19:38:43Z","updated_at":"2017-12-07T11:37:10Z","closed_at":null,"author_association":"NONE","body":"Creating a `NaiveDateTime` with `new` or `from_iso8601` will pass invalid times right into the date struct, where `DateTime` will fix issues with part of the time being out of bounds. \r\n\r\nIn some ways this makes sense due to `DateTime` depending on `Calendar.ISO`, but the difference in behavior can be surprising. The documentation describes the uniqueness of a `NaiveDateTime` being only that it does not have a time zone.\r\n\r\n### Environment\r\n\r\n* Elixir & Erlang versions (elixir --version): Elixir 1.5.1\r\n* Operating system: Mac OS Sierra 10.12.6\r\n\r\n### Current behavior\r\n\r\nWhen given seconds that are out of bounds, `DateTime` corrects the problem.\r\n\r\n```elixir\r\niex(1)> DateTime.from_iso8601(\"2017-11-28T11:32:60Z\")\r\n{:ok, #DateTime<2017-11-28 11:33:00Z>, 0}\r\n```\r\n\r\n`NaiveDateTime` preserves it.\r\n```elixir\r\niex(2)> NaiveDateTime.from_iso8601(\"2017-11-28T11:32:60Z\")\r\n{:ok, ~N[2017-11-28 11:32:60]}\r\n```\r\n\r\n### Expected behavior\r\n\r\nChanges from 32 minutes and 60 seconds, to 33 minutes and 0 seconds:\r\n```elixir\r\niex(2)> NaiveDateTime.from_iso8601(\"2017-11-28T11:32:60Z\")\r\n{:ok, ~N[2017-11-28 11:33:00]}\r\n```\r\n"},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/7047","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7047/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7047/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7047/events","html_url":"https://github.com/elixir-lang/elixir/issues/7047","id":275252642,"number":7047,"title":"generate one new module and one atom per compilation during runtime","user":{"login":"redink","id":3191073,"avatar_url":"https://avatars1.githubusercontent.com/u/3191073?v=4","gravatar_id":"","url":"https://api.github.com/users/redink","html_url":"https://github.com/redink","followers_url":"https://api.github.com/users/redink/followers","following_url":"https://api.github.com/users/redink/following{/other_user}","gists_url":"https://api.github.com/users/redink/gists{/gist_id}","starred_url":"https://api.github.com/users/redink/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/redink/subscriptions","organizations_url":"https://api.github.com/users/redink/orgs","repos_url":"https://api.github.com/users/redink/repos","events_url":"https://api.github.com/users/redink/events{/privacy}","received_events_url":"https://api.github.com/users/redink/received_events","type":"User","site_admin":false},"labels":[{"id":17739153,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/App:Elixir","name":"App:Elixir","color":"CCCCCC","default":false},{"id":207974,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Kind:Bug","name":"Kind:Bug","color":"e10c02","default":false},{"id":39802986,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Level:Advanced","name":"Level:Advanced","color":"f7c6c7","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/elixir-lang/elixir/milestones/23","html_url":"https://github.com/elixir-lang/elixir/milestone/23","labels_url":"https://api.github.com/repos/elixir-lang/elixir/milestones/23/labels","id":2856103,"number":23,"title":"v1.7.0","description":"","creator":{"login":"josevalim","id":9582,"avatar_url":"https://avatars0.githubusercontent.com/u/9582?v=4","gravatar_id":"","url":"https://api.github.com/users/josevalim","html_url":"https://github.com/josevalim","followers_url":"https://api.github.com/users/josevalim/followers","following_url":"https://api.github.com/users/josevalim/following{/other_user}","gists_url":"https://api.github.com/users/josevalim/gists{/gist_id}","starred_url":"https://api.github.com/users/josevalim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/josevalim/subscriptions","organizations_url":"https://api.github.com/users/josevalim/orgs","repos_url":"https://api.github.com/users/josevalim/repos","events_url":"https://api.github.com/users/josevalim/events{/privacy}","received_events_url":"https://api.github.com/users/josevalim/received_events","type":"User","site_admin":false},"open_issues":5,"closed_issues":7,"state":"open","created_at":"2017-10-21T20:25:30Z","updated_at":"2018-03-25T07:52:37Z","due_on":"2018-07-01T07:00:00Z","closed_at":null},"comments":15,"created_at":"2017-11-20T06:48:38Z","updated_at":"2018-01-05T21:39:29Z","closed_at":null,"author_association":"NONE","body":"https://github.com/elixir-lang/elixir/blob/d8a533d19f3a016512f605ac125e2709c6bd74ae/lib/elixir/src/elixir_code_server.erl#L132\r\n\r\n### Environment\r\n\r\n```\r\n$ iex\r\nErlang/OTP 20 [erts-9.1] [source] [64-bit] [smp:2:2] [ds:2:2:10] [async-threads:10] [hipe] [kernel-poll:false]\r\n\r\nInteractive Elixir (1.5.2) - press Ctrl+C to exit (type h() ENTER for help)\r\niex(1)> \r\n```\r\n\r\n### Our use case\r\n\r\nWe using beam as a specific cache for database, we need compile some given modules to load the latest data from db to beam in interval time during runtime. Using:\r\n\r\n```\r\nKernel.ParallelCompiler.files_to_path(source_files, beam_path)\r\n```\r\n\r\n### Current behavior\r\n\r\ncreate one new module and one atom per compilation, the atom just like:\r\n\r\n```\r\nelixir_compiler_8\r\nelixir_compiler_7\r\nelixir_compiler_6\r\nelixir_compiler_5\r\nelixir_compiler_4\r\nelixir_compiler_3\r\nelixir_compiler_2\r\n```\r\n\r\nand the module just like:\r\n\r\n```\r\n=mod:elixir_compiler_0\r\nCurrent size: 0\r\nOld size: 5193\r\nOld attributes: 836C00000001680264000376736E6C000000016E1000E98FE57BEC2C0B4635218BB1ED55D6CF6A6A\r\nOld compilation info: 836C0000000368026400076F7074696F6E736C0000000164000E6E6F7761726E5F6E6F6D617463686A680264000776657273696F6E6B0005372E312E326802640006736F757263656B005D2F6F70742F747562692F636D735F736572766963652F6C69622F706F6C6963795F656E67696E652D342E312E35302F7372632F6C69622F706F6C6963795F656E67696E652F67656E2F67656E5F7365726965735F706F6C6963792E65786A\r\n=mod:elixir_compiler_12\r\nCurrent size: 0\r\nOld size: 9748\r\nOld attributes: 836C00000001680264000376736E6C000000016E1000DAC1E389C40641D4E01D37111B6418976A6A\r\nOld compilation info: 836C0000000368026400076F7074696F6E736C0000000164000E6E6F7761726E5F6E6F6D617463686A680264000776657273696F6E6B0005372E312E326802640006736F757263656B00602F6F70742F747562692F636D735F736572766963652F6C69622F706F6C6963795F656E67696E652D342E312E35302F7372632F6C69622F706F6C6963795F656E67696E652F67656E2F67656E5F636F6E7461696E65725F706F6C6963792E65786A\r\n=mod:elixir_compiler_4\r\nCurrent size: 0\r\nOld size: 9027\r\nOld attributes: 836C00000001680264000376736E6C000000016E10009D8CADBE367736B8F3FAFE93BDEF7E5C6A6A\r\nOld compilation info: 836C0000000368026400076F7074696F6E736C0000000164000E6E6F7761726E5F6E6F6D617463686A680264000776657273696F6E6B0005372E312E326802640006736F757263656B00512F6F70742F747562692F636D735F736572766963652F6C69622F706F6C6963795F656E67696E652D342E312E35302F7372632F6C69622F706F6C6963795F656E67696E652F736C696365732F6E362E65786A\r\n```\r\n\r\njust because there is limitation for module amount in Erlang, the Elixir/Erlang node will be crash when the module amount reach the limitation, the crash dump slogan is:\r\n\r\n```\r\nno more index entries in module_code (max=65536)\r\n```\r\n\r\nthe detailed information is:\r\n\r\n```\r\n=hash_table:module_code\r\nsize: 51437\r\nused: 48890\r\nobjs: 65536\r\ndepth: 3\r\n=index_table:module_code\r\nsize: 65536\r\nlimit: 65536\r\nentries: 65536\r\n```\r\n\r\n### Attempt\r\n\r\nI tried to modify the Erlang vm args just as `ERL_MAX_PORTS`, BUT I failed.\r\n\r\nBecause the limitation for module amount can't modify in Erlang, it is hard-code in:\r\n\r\nhttps://github.com/erlang/otp/blob/master/erts/emulator/beam/module.c#L38\r\n\r\nThanks."},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/7046","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7046/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7046/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/7046/events","html_url":"https://github.com/elixir-lang/elixir/issues/7046","id":275203044,"number":7046,"title":"Consider requiring all calls to logger to pass a function","user":{"login":"josevalim","id":9582,"avatar_url":"https://avatars0.githubusercontent.com/u/9582?v=4","gravatar_id":"","url":"https://api.github.com/users/josevalim","html_url":"https://github.com/josevalim","followers_url":"https://api.github.com/users/josevalim/followers","following_url":"https://api.github.com/users/josevalim/following{/other_user}","gists_url":"https://api.github.com/users/josevalim/gists{/gist_id}","starred_url":"https://api.github.com/users/josevalim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/josevalim/subscriptions","organizations_url":"https://api.github.com/users/josevalim/orgs","repos_url":"https://api.github.com/users/josevalim/repos","events_url":"https://api.github.com/users/josevalim/events{/privacy}","received_events_url":"https://api.github.com/users/josevalim/received_events","type":"User","site_admin":false},"labels":[{"id":119389005,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/App:Logger","name":"App:Logger","color":"cccccc","default":false},{"id":207979,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Kind:Chore","name":"Kind:Chore","color":"fbca04","default":false},{"id":778790,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Note:Discussion","name":"Note:Discussion","color":"bfdadc","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/elixir-lang/elixir/milestones/23","html_url":"https://github.com/elixir-lang/elixir/milestone/23","labels_url":"https://api.github.com/repos/elixir-lang/elixir/milestones/23/labels","id":2856103,"number":23,"title":"v1.7.0","description":"","creator":{"login":"josevalim","id":9582,"avatar_url":"https://avatars0.githubusercontent.com/u/9582?v=4","gravatar_id":"","url":"https://api.github.com/users/josevalim","html_url":"https://github.com/josevalim","followers_url":"https://api.github.com/users/josevalim/followers","following_url":"https://api.github.com/users/josevalim/following{/other_user}","gists_url":"https://api.github.com/users/josevalim/gists{/gist_id}","starred_url":"https://api.github.com/users/josevalim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/josevalim/subscriptions","organizations_url":"https://api.github.com/users/josevalim/orgs","repos_url":"https://api.github.com/users/josevalim/repos","events_url":"https://api.github.com/users/josevalim/events{/privacy}","received_events_url":"https://api.github.com/users/josevalim/received_events","type":"User","site_admin":false},"open_issues":5,"closed_issues":7,"state":"open","created_at":"2017-10-21T20:25:30Z","updated_at":"2018-03-25T07:52:37Z","due_on":"2018-07-01T07:00:00Z","closed_at":null},"comments":32,"created_at":"2017-11-19T23:25:35Z","updated_at":"2018-01-24T20:36:32Z","closed_at":null,"author_association":"OWNER","body":"This removes the need for compile time trickery and gives developers less chance to do expensive calls in production i.e:\r\n\r\n    Logger.debug fn -> \"foo #{inspect bar}\" end"},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/6996","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/6996/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/6996/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/6996/events","html_url":"https://github.com/elixir-lang/elixir/issues/6996","id":270597969,"number":6996,"title":"Mix.Config needs a function for importing configs reliably in umbrella applications","user":{"login":"lukaszsamson","id":1078186,"avatar_url":"https://avatars2.githubusercontent.com/u/1078186?v=4","gravatar_id":"","url":"https://api.github.com/users/lukaszsamson","html_url":"https://github.com/lukaszsamson","followers_url":"https://api.github.com/users/lukaszsamson/followers","following_url":"https://api.github.com/users/lukaszsamson/following{/other_user}","gists_url":"https://api.github.com/users/lukaszsamson/gists{/gist_id}","starred_url":"https://api.github.com/users/lukaszsamson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lukaszsamson/subscriptions","organizations_url":"https://api.github.com/users/lukaszsamson/orgs","repos_url":"https://api.github.com/users/lukaszsamson/repos","events_url":"https://api.github.com/users/lukaszsamson/events{/privacy}","received_events_url":"https://api.github.com/users/lukaszsamson/received_events","type":"User","site_admin":false},"labels":[{"id":17739153,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/App:Elixir","name":"App:Elixir","color":"CCCCCC","default":false},{"id":39802986,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Level:Advanced","name":"Level:Advanced","color":"f7c6c7","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2017-11-02T10:12:37Z","updated_at":"2018-01-11T09:36:15Z","closed_at":null,"author_association":"CONTRIBUTOR","body":"Rationale:\r\nGiven the umbrella application structure:\r\n```\r\nconfig/\r\n  config.exs\r\napps/\r\n  app_common/\r\n    config/\r\n      config.exs\r\n  app_myapp/\r\n    config/\r\n      config.exs\r\n```\r\nwhere `app_myapp` depends on `app_common` (has ```{:app_common, in_umbrella: true}``` in `deps`). `apps/app_common/config/config.exs` provides some config setting\r\n`config :app_common, :setting, \"default\"`\r\nwhile `app_myapp` overrides it in `apps/app_myapp/config/config.exs`\r\n`config :app_common, :setting, \"not default\"`\r\n\r\nThe pattern encouraged by `mix new` and `mix phx.new` tasks for importing configs in umbrella applications is to use:\r\n`import_config \"../apps/*/config/config.exs\"`\r\nin `config/config.exs`. With this pattern the config overriding works as expected.\r\n\r\nHowever, it can lead to subtle errors. Wildcard import means that configs are processed alphabetically. Suppose you do a refactoring and rename `app_common` to `common`. `app_myapp` still correctly depends on `common` but now `common` config overrides `app_myapp` config.\r\n\r\nCurrently, the only reliable solution is to do all imports explicitly. It would be much better if there was a function importing configs in the same order that applications are started by `mix`."},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/6957","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/6957/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/6957/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/6957/events","html_url":"https://github.com/elixir-lang/elixir/pull/6957","id":267255992,"number":6957,"title":"Revisit strictness of Access module #6515","user":{"login":"amandasposito","id":840531,"avatar_url":"https://avatars2.githubusercontent.com/u/840531?v=4","gravatar_id":"","url":"https://api.github.com/users/amandasposito","html_url":"https://github.com/amandasposito","followers_url":"https://api.github.com/users/amandasposito/followers","following_url":"https://api.github.com/users/amandasposito/following{/other_user}","gists_url":"https://api.github.com/users/amandasposito/gists{/gist_id}","starred_url":"https://api.github.com/users/amandasposito/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/amandasposito/subscriptions","organizations_url":"https://api.github.com/users/amandasposito/orgs","repos_url":"https://api.github.com/users/amandasposito/repos","events_url":"https://api.github.com/users/amandasposito/events{/privacy}","received_events_url":"https://api.github.com/users/amandasposito/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2017-10-20T17:57:30Z","updated_at":"2017-12-23T17:19:05Z","closed_at":null,"author_association":"NONE","pull_request":{"url":"https://api.github.com/repos/elixir-lang/elixir/pulls/6957","html_url":"https://github.com/elixir-lang/elixir/pull/6957","diff_url":"https://github.com/elixir-lang/elixir/pull/6957.diff","patch_url":"https://github.com/elixir-lang/elixir/pull/6957.patch"},"body":"This PR aims to solve the issue #6515, that opened a discussion about lifting the restriction for the `Access` module, so it could interact with non-tuple lists.\r\n\r\nI removed the call to the `Keyword.get_and_update` and `Keyword.pop` functions and implemented a solution closer to the `Keyword` private functions, just handling the new scenario for non-tuple lists. \r\n\r\nThe reason why I didn't implement a partial solution, using both `Access` and `Keyword`, was because it could cause a performance issue."},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/6768","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/6768/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/6768/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/6768/events","html_url":"https://github.com/elixir-lang/elixir/issues/6768","id":264042653,"number":6768,"title":"ExUnit diff of two lists is confusing when head is missing","user":{"login":"myronmarston","id":49391,"avatar_url":"https://avatars0.githubusercontent.com/u/49391?v=4","gravatar_id":"","url":"https://api.github.com/users/myronmarston","html_url":"https://github.com/myronmarston","followers_url":"https://api.github.com/users/myronmarston/followers","following_url":"https://api.github.com/users/myronmarston/following{/other_user}","gists_url":"https://api.github.com/users/myronmarston/gists{/gist_id}","starred_url":"https://api.github.com/users/myronmarston/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/myronmarston/subscriptions","organizations_url":"https://api.github.com/users/myronmarston/orgs","repos_url":"https://api.github.com/users/myronmarston/repos","events_url":"https://api.github.com/users/myronmarston/events{/privacy}","received_events_url":"https://api.github.com/users/myronmarston/received_events","type":"User","site_admin":false},"labels":[{"id":109230298,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/App:ExUnit","name":"App:ExUnit","color":"CCCCCC","default":false},{"id":4930795,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Kind:Enhancement","name":"Kind:Enhancement","color":"009800","default":false},{"id":778790,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Note:Discussion","name":"Note:Discussion","color":"bfdadc","default":false}],"state":"open","locked":false,"assignee":{"login":"lexmag","id":248290,"avatar_url":"https://avatars2.githubusercontent.com/u/248290?v=4","gravatar_id":"","url":"https://api.github.com/users/lexmag","html_url":"https://github.com/lexmag","followers_url":"https://api.github.com/users/lexmag/followers","following_url":"https://api.github.com/users/lexmag/following{/other_user}","gists_url":"https://api.github.com/users/lexmag/gists{/gist_id}","starred_url":"https://api.github.com/users/lexmag/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lexmag/subscriptions","organizations_url":"https://api.github.com/users/lexmag/orgs","repos_url":"https://api.github.com/users/lexmag/repos","events_url":"https://api.github.com/users/lexmag/events{/privacy}","received_events_url":"https://api.github.com/users/lexmag/received_events","type":"User","site_admin":false},"assignees":[{"login":"lexmag","id":248290,"avatar_url":"https://avatars2.githubusercontent.com/u/248290?v=4","gravatar_id":"","url":"https://api.github.com/users/lexmag","html_url":"https://github.com/lexmag","followers_url":"https://api.github.com/users/lexmag/followers","following_url":"https://api.github.com/users/lexmag/following{/other_user}","gists_url":"https://api.github.com/users/lexmag/gists{/gist_id}","starred_url":"https://api.github.com/users/lexmag/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lexmag/subscriptions","organizations_url":"https://api.github.com/users/lexmag/orgs","repos_url":"https://api.github.com/users/lexmag/repos","events_url":"https://api.github.com/users/lexmag/events{/privacy}","received_events_url":"https://api.github.com/users/lexmag/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2017-10-09T22:18:14Z","updated_at":"2017-10-09T22:20:33Z","closed_at":null,"author_association":"CONTRIBUTOR","body":"### Environment\r\n\r\n* Elixir & Erlang versions (elixir --version): \r\n\r\n```\r\nErlang/OTP 20 [erts-9.0] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false]\r\n\r\nElixir 1.5.1\r\n```\r\n\r\n* Operating system: \r\n\r\nOS X 10.12.6\r\n\r\n### Current behavior\r\n\r\nGiven this failing test, where the difference between two lists is a missing element at the end:\r\n\r\n``` elixir\r\n  test \"diffing date lists with a missing date at end\" do\r\n    dates_1 = [~D[2017-06-01], ~D[2017-06-02], ~D[2017-06-03]]\r\n    dates_2 = [~D[2017-06-01], ~D[2017-06-02]                ]\r\n\r\n    assert dates_1 == dates_2\r\n  end\r\n```\r\n\r\n...it produces a really nice, clear diff:\r\n\r\n![screen shot 2017-10-09 at 3 14 12 pm](https://user-images.githubusercontent.com/49391/31360718-8d0592ae-ad04-11e7-8d40-5971d16bbb6a.png)\r\n\r\n...but given this failing test, where the first element is missing:\r\n\r\n``` elixir\r\n  test \"diffing date lists with a missing date at start\" do\r\n    dates_1 = [~D[2017-06-01], ~D[2017-06-02], ~D[2017-06-03]]\r\n    dates_2 = [                ~D[2017-06-02], ~D[2017-06-03]]\r\n\r\n    assert dates_1 == dates_2\r\n  end\r\n```\r\n\r\n...it produces a confusing diff:\r\n\r\n![screen shot 2017-10-09 at 3 15 28 pm](https://user-images.githubusercontent.com/49391/31360766-be167fc0-ad04-11e7-8796-680e7d5c6ef2.png)\r\n\r\n### Expected behavior\r\n\r\nIt would be great if the diff for the latter case was more like the first one, showing that the difference is the missing first element, instead of individually diffing the list elements position by position.  Not sure how feasible that is, but figured I'd ask :)."},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/6738","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/6738/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/6738/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/6738/events","html_url":"https://github.com/elixir-lang/elixir/issues/6738","id":263948264,"number":6738,"title":"with clause cannot match when case is inside else block","user":{"login":"jordan0day","id":545037,"avatar_url":"https://avatars1.githubusercontent.com/u/545037?v=4","gravatar_id":"","url":"https://api.github.com/users/jordan0day","html_url":"https://github.com/jordan0day","followers_url":"https://api.github.com/users/jordan0day/followers","following_url":"https://api.github.com/users/jordan0day/following{/other_user}","gists_url":"https://api.github.com/users/jordan0day/gists{/gist_id}","starred_url":"https://api.github.com/users/jordan0day/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jordan0day/subscriptions","organizations_url":"https://api.github.com/users/jordan0day/orgs","repos_url":"https://api.github.com/users/jordan0day/repos","events_url":"https://api.github.com/users/jordan0day/events{/privacy}","received_events_url":"https://api.github.com/users/jordan0day/received_events","type":"User","site_admin":false},"labels":[{"id":16893337,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/App:IEx","name":"App:IEx","color":"CCCCCC","default":false},{"id":207974,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Kind:Bug","name":"Kind:Bug","color":"e10c02","default":false},{"id":39802986,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Level:Advanced","name":"Level:Advanced","color":"f7c6c7","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2017-10-09T16:07:43Z","updated_at":"2017-12-13T14:17:56Z","closed_at":null,"author_association":"NONE","body":"This is very similar to #6380, but shows up when using a `case` expression inside the `else` block of a `with`.\r\n\r\n### Environment\r\n\r\n* Elixir & Erlang versions (elixir --version): Elixir 1.5.2, Erlang 20.0\r\n* Operating system: OS X 10.12.6 Sierra\r\n\r\n### Current behavior\r\nThe following code functions correctly, but emits the `this clause cannot match because of different types/sizes` warning during compilation.\r\n\r\n```elixir\r\nwith {:first, int1} when is_integer(int1)   <- {:first, Integer.gcd(2, 4)},\r\n     {:second, int2} when is_integer(int2)  <- {:second, Integer.gcd(2, 4)} do\r\n  {:ok, int1 + int2}\r\nelse\r\n  error ->\r\n    case error do\r\n      {:first, nil}  -> {:error, \"first number is not integer\"}\r\n      {:second, nil} -> {:error, \"second number is not integer\"}\r\n    end\r\nend\r\n```\r\n\r\nObviously in this example it's not useful to have an embedded case expression, but I've found it to be useful a number of times for logging an error-specific message and then sharing any amount of cleanup/retry code inside the `else` block.\r\n\r\nFailing test commited to `warning_test.exs` here: https://github.com/jordan0day/elixir/commit/ff4611acf3f1565f7c4989ade96e24a85ea68860\r\n\r\n\r\n\r\n### Expected behavior\r\nNo warning should be emitted.\r\n"},{"url":"https://api.github.com/repos/elixir-lang/elixir/issues/6611","repository_url":"https://api.github.com/repos/elixir-lang/elixir","labels_url":"https://api.github.com/repos/elixir-lang/elixir/issues/6611/labels{/name}","comments_url":"https://api.github.com/repos/elixir-lang/elixir/issues/6611/comments","events_url":"https://api.github.com/repos/elixir-lang/elixir/issues/6611/events","html_url":"https://github.com/elixir-lang/elixir/issues/6611","id":261241919,"number":6611,"title":"Support Erlang 21 new features","user":{"login":"josevalim","id":9582,"avatar_url":"https://avatars0.githubusercontent.com/u/9582?v=4","gravatar_id":"","url":"https://api.github.com/users/josevalim","html_url":"https://github.com/josevalim","followers_url":"https://api.github.com/users/josevalim/followers","following_url":"https://api.github.com/users/josevalim/following{/other_user}","gists_url":"https://api.github.com/users/josevalim/gists{/gist_id}","starred_url":"https://api.github.com/users/josevalim/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/josevalim/subscriptions","organizations_url":"https://api.github.com/users/josevalim/orgs","repos_url":"https://api.github.com/users/josevalim/repos","events_url":"https://api.github.com/users/josevalim/events{/privacy}","received_events_url":"https://api.github.com/users/josevalim/received_events","type":"User","site_admin":false},"labels":[{"id":17739153,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/App:Elixir","name":"App:Elixir","color":"CCCCCC","default":false},{"id":207979,"url":"https://api.github.com/repos/elixir-lang/elixir/labels/Kind:Chore","name":"Kind:Chore","color":"fbca04","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2017-09-28T08:56:29Z","updated_at":"2018-01-13T09:35:02Z","closed_at":null,"author_association":"OWNER","body":"Erlang 21 has not even been released yet but this will help us keep track of everything.\r\n\r\nTo be implemented when Erlang 21 is released:\r\n\r\n  * [ ] Support new handle_continue/2 gen_server callback\r\n  * [ ] Support the `__STACKTRACE__` variable in `catch` and `rescue` and Erlang's new try/catch clauses\r\n\r\nTo be implemented when we require Erlang 21 exclusively:\r\n\r\n  * [ ] Use the new compile_info compiler option to attach Elixir compiler metadata\r\n  * [ ] Benchmark maps:next/2 as an alternative to implement map enumeration"}]